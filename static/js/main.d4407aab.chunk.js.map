{"version":3,"sources":["Components/Districts.js","Components/SampleNames.js","Components/Migration.js","Components/SyllabicCount.js","Components/GDP.js","Components/image.png","Components/largeImage.png","Components/MigrationVSSyllabicCount.js","Components/MainPage.js","App.js","index.js"],"names":["Districts","props","map","SampleNames","objects","rows1","rows2","stateName","districtName","year","columns","df","DataFrame","df2","union","district","yearString","String","dataDict","filter","State","District","Year","toArray","length","i","shift","GetSampleNamesData","csvData1","csvData2","state","undefined","Migration","series","rows","districts","dataObjects","push","unshift","districtObjects","row","index","In_migrants","parseInt","Data","GetMigrationData","csvData","LineChart","width","height","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","type","interval","angle","textAnchor","allowDuplicatedCategory","tick","fontSize","Label","value","position","dy","YAxis","dx","s","Line","data","name","dot","SyllabicCount","GetSyllabicData","domain","GDP","GetGDPData","GetStateObjects","states","str","label","ScatterPlotElement","yearInterval","AvgSyllabicCount","GetData","ScatterChart","Scatter","strokeWidth","fillOpacity","fill","MigrationVSSyllabicCount","useState","stateValue","stateLabel","stateSelected","setStateSelected","React","setRows","useEffect","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","getData","stateSelectElement","className","classNamePrefix","placeholder","onChange","event","selectedValue","isClearable","isSearchable","options","Container","Row","Col","GetYearObjects","years","GetDistrictObjects","MainPage","setShowVariable","districtSelected","setDistrictSelected","yearSelected","setYearSelected","syllabicRows","setSyllabicRows","migrationRows","setMigrationRows","gdpRows","setGDPRows","sampleNameRows1","setSampleNameRows1","fromCSV","temp","toCollection","sampleNameRows2","setSampleNameRows2","districtSelectElement","yearSelectElement","class","style","marginTop","toUpperCase","imageSrc","image","imageAlt","largeImageSrc","largeImage","colspan","App","studentList","val","Tables_in_namesdb","ReactDOM","render","document","getElementById"],"mappings":"8RAAe,SAASA,EAAUC,GAChC,IAAIC,EAAM,CACVA,8BAAqC,CACnC,UACA,2BACA,iBAEFA,iBAAwB,CACtB,YACA,WACA,gBACA,gBACA,SACA,SACA,UACA,UACA,UACA,WACA,aACA,gBACA,gBAEFA,oBAA2B,CACzB,YACA,gBACA,cACA,aACA,QACA,kBACA,aACA,SACA,QACA,cACA,kBACA,cACA,cAEFA,WAAoB,CAAC,cACrBA,yBAAgC,CAAC,0BACjCA,gBAAuB,CAAC,QAAS,OACjCA,IAAa,CAAC,YAAa,aAC3BA,QAAiB,CACf,SACA,UACA,YACA,YACA,UACA,QACA,UACA,OACA,UACA,SACA,cACA,eACA,YACA,UACA,SACA,SACA,QACA,UACA,eAEFA,mBAA0B,CACxB,WACA,SACA,WACA,SACA,UACA,QACA,QACA,SACA,UACA,QACA,OAEFA,oBAA2B,CAAC,SAAU,OACtCA,iBAAwB,CACtB,WACA,UACA,QACA,QACA,SACA,aACA,aACA,QACA,QACA,QACA,OACA,UACA,OACA,UACA,QACA,cACA,SACA,WACA,SACA,QACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,QACA,SACA,QACA,UACA,WACA,UACA,WACA,QACA,YACA,SACA,SACA,WAEFA,QAAiB,CACf,YACA,UACA,gBACA,cACA,cACA,WACA,aACA,UACA,UAEFA,UAAmB,CACjB,kBACA,qBACA,mBACA,UACA,mBACA,kBACA,oBAEFA,QAAiB,CACf,SACA,WACA,UACA,YACA,UACA,QACA,QACA,YAEFA,SAAkB,CAChB,UAEA,SAEA,aACA,MAEA,OACA,WACA,QACA,aAEFA,WAAoB,CAAC,WAAY,OAAQ,aAAc,SACvDA,gBAAuB,CACrB,OACA,UACA,YACA,WACA,SACA,YACA,WACA,SACA,cACA,aACA,OACA,cACA,WACA,YACA,qBACA,YACA,WACA,SACA,SACA,SACA,UACA,eACA,eACA,YACA,QACA,WACA,UACA,SACA,WACA,UACA,MACA,SACA,YACA,gBACA,WACA,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","file":"static/js/main.d4407aab.chunk.js","sourcesContent":["export default function Districts(props) {\r\n  let map = {};\r\n  map[\"Andaman And Nicobar Islands\"] = [\r\n    \"Nicobar\",\r\n    \"North And Middle Andaman\",\r\n    \"South Andaman\",\r\n  ];\r\n  map[\"Andhra Pradesh\"] = [\r\n    \"Anantapur\",\r\n    \"Chittoor\",\r\n    \"East Godavari\",\r\n    \"West Godavari\",\r\n    \"Guntur\",\r\n    \"Kadapa\",\r\n    \"Krishna\",\r\n    \"Kurnool\",\r\n    \"Nellore\",\r\n    \"Prakasam\",\r\n    \"Srikakulam\",\r\n    \"Visakhapatnam\",\r\n    \"Vizianagaram\",\r\n  ];\r\n  map[\"Arunachal Pradesh\"] = [\r\n    \"Changlang\",\r\n    \"Dibang Valley\",\r\n    \"East Kameng\",\r\n    \"East Siang\",\r\n    \"Lohit\",\r\n    \"Lower Subansiri\",\r\n    \"Papum Pare\",\r\n    \"Tawang\",\r\n    \"Tirap\",\r\n    \"Upper Siang\",\r\n    \"Upper Subansiri\",\r\n    \"West Kameng\",\r\n    \"West Siang\",\r\n  ];\r\n  map[\"Chandigarh\"] = [\"Chandigarh\"];\r\n  map[\"Dadra And Nagar Haveli\"] = [\"Dadra And Nagar Haveli\"];\r\n  map[\"Daman And Diu\"] = [\"Daman\", \"Diu\"];\r\n  map[\"Goa\"] = [\"North Goa\", \"South Goa\"];\r\n  map[\"Haryana\"] = [\r\n    \"Ambala\",\r\n    \"Bhiwani\",\r\n    \"Faridabad\",\r\n    \"Fatehabad\",\r\n    \"Gurgaon\",\r\n    \"Hisar\",\r\n    \"Jhajjar\",\r\n    \"Jind\",\r\n    \"Kaithal\",\r\n    \"Karnal\",\r\n    \"Kurukshetra\",\r\n    \"Mahendragarh\",\r\n    \"Panchkula\",\r\n    \"Panipat\",\r\n    \"Rewari\",\r\n    \"Rohtak\",\r\n    \"Sirsa\",\r\n    \"Sonipat\",\r\n    \"Yamunanagar\",\r\n  ];\r\n  map[\"Himachal Pradesh\"] = [\r\n    \"Bilaspur\",\r\n    \"Chamba\",\r\n    \"Hamirpur\",\r\n    \"Kangra\",\r\n    \"Kinnaur\",\r\n    \"Kullu\",\r\n    \"Mandi\",\r\n    \"Shimla\",\r\n    \"Sirmaur\",\r\n    \"Solan\",\r\n    \"Una\",\r\n  ];\r\n  map[\"Jammu And Kashmir\"] = [\"Kargil\", \"Leh\"];\r\n  map[\"Madhya Pradesh\"] = [\r\n    \"Balaghat\",\r\n    \"Barwani\",\r\n    \"Betul\",\r\n    \"Bhind\",\r\n    \"Bhopal\",\r\n    \"Chhatarpur\",\r\n    \"Chhindwara\",\r\n    \"Damoh\",\r\n    \"Datia\",\r\n    \"Dewas\",\r\n    \"Dhar\",\r\n    \"Dindori\",\r\n    \"Guna\",\r\n    \"Gwalior\",\r\n    \"Harda\",\r\n    \"Hoshangabad\",\r\n    \"Indore\",\r\n    \"Jabalpur\",\r\n    \"Jhabua\",\r\n    \"Katni\",\r\n    \"Khandwa\",\r\n    \"Khargone\",\r\n    \"Mandla\",\r\n    \"Mandsaur\",\r\n    \"Morena\",\r\n    \"Narsinghpur\",\r\n    \"Neemuch\",\r\n    \"Panna\",\r\n    \"Raisen\",\r\n    \"Rajgarh\",\r\n    \"Ratlam\",\r\n    \"Rewa\",\r\n    \"Sagar\",\r\n    \"Satna\",\r\n    \"Sehore\",\r\n    \"Seoni\",\r\n    \"Shahdol\",\r\n    \"Shajapur\",\r\n    \"Sheopur\",\r\n    \"Shivpuri\",\r\n    \"Sidhi\",\r\n    \"Tikamgarh\",\r\n    \"Ujjain\",\r\n    \"Umaria\",\r\n    \"Vidisha\",\r\n  ];\r\n  map[\"Manipur\"] = [\r\n    \"Bishnupur\",\r\n    \"Chandel\",\r\n    \"Churachandpur\",\r\n    \"Imphal East\",\r\n    \"Imphal West\",\r\n    \"Senapati\",\r\n    \"Tamenglong\",\r\n    \"Thoubal\",\r\n    \"Ukhrul\",\r\n  ];\r\n  map[\"Meghalaya\"] = [\r\n    \"East Garo Hills\",\r\n    \"East Jaintia Hills\",\r\n    \"East Khasi Hills\",\r\n    \"Ri Bhoi\",\r\n    \"South Garo Hills\",\r\n    \"West Garo Hills\",\r\n    \"West Khasi Hills\",\r\n  ];\r\n  map[\"Mizoram\"] = [\r\n    \"Aizawl\",\r\n    \"Champhai\",\r\n    \"Kolasib\",\r\n    \"Lawngtlai\",\r\n    \"Lunglei\",\r\n    \"Mamit\",\r\n    \"Saiha\",\r\n    \"Serchhip\",\r\n  ];\r\n  map[\"Nagaland\"] = [\r\n    \"Dimapur\",\r\n    // \"Kiphire\",\r\n    \"Kohima\",\r\n    // \"Longleng\",\r\n    \"Mokokchung\",\r\n    \"Mon\",\r\n    // \"Peren\",\r\n    \"Phek\",\r\n    \"Tuensang\",\r\n    \"Wokha\",\r\n    \"Zunheboto\",\r\n  ];\r\n  map[\"Puducherry\"] = [\"Karaikal\", \"Mahe\", \"Puducherry\", \"Yanam\"];\r\n  map[\"Uttar Pradesh\"] = [\r\n    \"Agra\",\r\n    \"Aligarh\",\r\n    \"Allahabad\",\r\n    \"Auraiyya\",\r\n    \"Bagpat\",\r\n    \"Barabanki\",\r\n    \"Bareilly\",\r\n    \"Bijnor\",\r\n    \"Bulandshahr\",\r\n    \"Chitrakoot\",\r\n    \"Etah\",\r\n    \"Farrukhabad\",\r\n    \"Fatehpur\",\r\n    \"Firozabad\",\r\n    \"Gautam Buddh Nagar\",\r\n    \"Ghaziabad\",\r\n    \"Hamirpur\",\r\n    \"Hardoi\",\r\n    \"Jalaun\",\r\n    \"Jhansi\",\r\n    \"Kannauj\",\r\n    \"Kanpur Rural\",\r\n    \"Kanpur Urban\",\r\n    \"Kaushambi\",\r\n    \"Kheri\",\r\n    \"Lalitpur\",\r\n    \"Lucknow\",\r\n    \"Mahoba\",\r\n    \"Mainpuri\",\r\n    \"Mathura\",\r\n    \"Mau\",\r\n    \"Meerut\",\r\n    \"Moradabad\",\r\n    \"Muzaffarnagar\",\r\n    \"Pilibhit\",\r\n    \"Pratapgarh\",\r\n    \"Rae Bareli\",\r\n    \"Rampur\",\r\n    \"Saharanpur\",\r\n    \"Shahjahanpur\",\r\n    \"Sitapur\",\r\n    \"Sultanpur\",\r\n    \"Unnao\",\r\n  ];\r\n  map[\"Uttarakhand\"] = [\r\n    \"Bageshwar\",\r\n    \"Dehradun\",\r\n    \"Nainital\",\r\n    \"Pauri Garhwal\",\r\n    \"Udham Singh Nagar\",\r\n    \"Uttarkashi\",\r\n  ];\r\n\r\n  // for First time page load (without selection from DropDown)\r\n  map[\"None\"] = [\"None\"];\r\n\r\n  //   const keys = Object.keys(map);\r\n  //   keys.map((x) => console.log(x));\r\n  //   console.log(\"keys: \" + Object.keys(map));\r\n  //   console.log(map[props]);\r\n  //   console.log(districtObjects);\r\n  return map[props];\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport Select from \"react-select\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport DataFrame from \"dataframe-js\";\r\n\r\nfunction GetSampleNamesData(rows1, rows2, stateName, districtName, year) {\r\n  const columns = [\r\n    \"Year\",\r\n    \"State\",\r\n    \"District\",\r\n    \"People\",\r\n    \"AvgSyllabicCount\",\r\n    \"Name1\",\r\n    \"Name2\",\r\n    \"Name3\",\r\n    \"Name4\",\r\n    \"Name5\",\r\n    \"Name6\",\r\n    \"Name7\",\r\n    \"Name8\",\r\n    \"Name9\",\r\n    \"Name10\",\r\n  ];\r\n  //   console.log(\"Sample names rows1: \");\r\n  //   console.log(rows1);\r\n  //   console.log(\"Sample names rows2: \");\r\n\r\n  //   console.log(rows2);\r\n\r\n  let df = new DataFrame(rows1, columns);\r\n  //   console.log(df);\r\n  const df2 = new DataFrame(rows2, columns);\r\n  //   console.log(df2);\r\n\r\n  df = df.union(df2);\r\n  //   console.log(df);\r\n\r\n  let district = Districts(stateName)[0];\r\n\r\n  if (districtName !== \"All Districts\") {\r\n    district = districtName;\r\n  }\r\n\r\n  const yearString = String(year);\r\n  const dataDict = df\r\n    .filter({ State: stateName, District: district, Year: yearString })\r\n    .toArray();\r\n\r\n  //   console.log(stateName);\r\n  //   console.log(district);\r\n  //   console.log(yearString);\r\n  //   console.log(dataDict);\r\n\r\n  //   console.log(dataDict.length);\r\n\r\n  if (dataDict.length > 0) {\r\n    for (let i = 0; i < 5; i++) {\r\n      dataDict[0].shift();\r\n    }\r\n  }\r\n  return dataDict[0];\r\n}\r\n\r\nfunction SampleNames(props) {\r\n  // console.log(\"fun\");\r\n  // console.log(props.csvData1);\r\n  // console.log(props.csvData2);\r\n  const objects = GetSampleNamesData(\r\n    props.csvData1,\r\n    props.csvData2,\r\n    props.state,\r\n    props.district,\r\n    props.year\r\n  );\r\n  //   console.log(objects);\r\n  if (objects === undefined) {\r\n    return <></>;\r\n  }\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>{objects[0]}</td>\r\n        <td>{objects[1]}</td>\r\n        <td>{objects[2]}</td>\r\n        <td>{objects[3]}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>{objects[4]}</td>\r\n        <td>{objects[5]}</td>\r\n        <td>{objects[6]}</td>\r\n        <td>{objects[7]}</td>\r\n      </tr>\r\n      <tr>\r\n        <td></td>\r\n        <td>{objects[8]}</td>\r\n        <td>{objects[9]}</td>\r\n        <td></td>\r\n      </tr>\r\n      {/* {objects.map((object, index) => (\r\n        <li key={index}>{object}</li>\r\n      ))} */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SampleNames;\r\n","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport SampleNames from \"./SampleNames\";\r\nimport Axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Label,\r\n} from \"recharts\";\r\nimport Papa from \"papaparse\";\r\nimport DataFrame from \"dataframe-js\";\r\n\r\nfunction GetMigrationData(rows, stateName, districtName) {\r\n  const columns = [\"Year\", \"State\", \"District\", \"In-migrants\"];\r\n  const df = new DataFrame(rows, columns);\r\n  // console.log(rows);\r\n  // console.log(\"districtName: \" + districtName);\r\n  let districts = [],\r\n    dataObjects = [];\r\n  if (districtName === \"All Districts\") {\r\n    districts = Districts(stateName);\r\n  } else {\r\n    districts.push(districtName);\r\n  }\r\n  for (let i = 0; i < districts.length; i++) {\r\n    let dataDict = df\r\n      .filter({ State: stateName, District: districts[i] })\r\n      .toArray();\r\n    // console.log(dataDict);\r\n    if (dataDict.length === 2) {\r\n      dataDict.unshift([\"1987 - 1991\", stateName, districtName, \"\"]);\r\n      dataDict.unshift([\"1982 - 1986\", stateName, districtName, \"\"]);\r\n      dataDict.unshift([\"1977 - 1981\", stateName, districtName, \"\"]);\r\n      dataDict.unshift([\"1972 - 1976\", stateName, districtName, \"\"]);\r\n    }\r\n    const districtObjects = dataDict.map((row, index) => ({\r\n      Year: row[0],\r\n      In_migrants: parseInt(row[3]),\r\n    }));\r\n    // console.log(districtObjects);\r\n    dataObjects.push({ District: districts[i], Data: districtObjects });\r\n  }\r\n  return dataObjects;\r\n}\r\n\r\nfunction Migration(props) {\r\n  const stateName = props.state;\r\n  const districtName = props.district;\r\n  const series = GetMigrationData(props.csvData, stateName, districtName);\r\n  return (\r\n    // <ResponsiveContainer width=\"100%\" height={400}>\r\n    <LineChart\r\n      width={500}\r\n      height={300}\r\n      margin={{ top: 20, right: 75, bottom: 50, left: 30 }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis\r\n        dataKey=\"Year\"\r\n        type=\"category\"\r\n        interval={0}\r\n        angle={30}\r\n        textAnchor=\"start\"\r\n        allowDuplicatedCategory={false}\r\n        tick={{ fontSize: 14 }}\r\n      >\r\n        <Label\r\n          value=\"Year intervals\"\r\n          position=\"insideBottomCenter\"\r\n          dy={55}\r\n          fontSize={15}\r\n        />\r\n      </XAxis>\r\n      <YAxis type=\"number\" tick={{ fontSize: 14 }}>\r\n        <Label\r\n          value=\"In-migrants\"\r\n          angle={-90}\r\n          position=\"insideLeftCenter\"\r\n          dx={-45}\r\n          fontSize={15}\r\n        />\r\n      </YAxis>\r\n      {/* <YAxis /> */}\r\n      {/* <Tooltip /> */}\r\n      {/* <Legend\r\n          wrapperStyle={{ position: \"relative\" }}\r\n          layout=\"horizontal\"\r\n          verticalAlign=\"right\"\r\n          align=\"center\"\r\n        /> */}\r\n      {series.map((s) => (\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"In_migrants\"\r\n          data={s.Data}\r\n          name={s.District}\r\n          key={s.District}\r\n          dot={false}\r\n          // activeDot={{ onClick: (event, payload) => console.log(payload) }}\r\n        />\r\n      ))}\r\n    </LineChart>\r\n    // </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default Migration;\r\n","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport SampleNames from \"./SampleNames\";\r\nimport Axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Label,\r\n} from \"recharts\";\r\nimport Papa from \"papaparse\";\r\nimport DataFrame from \"dataframe-js\";\r\n// import csvData from \"./YearwiseSyllabicCount3.csv\";\r\n\r\nfunction GetSyllabicData(rows, stateName, districtName) {\r\n  const columns = [\r\n    \"Year\",\r\n    \"State\",\r\n    \"District\",\r\n    \"People\",\r\n    \"AvgSyllabicCount\",\r\n    // \"Name1\",\r\n    // \"Name2\",\r\n    // \"Name3\",\r\n    // \"Name4\",\r\n    // \"Name5\",\r\n    // \"Name6\",\r\n    // \"Name7\",\r\n    // \"Name8\",\r\n    // \"Name9\",\r\n    // \"Name10\",\r\n  ];\r\n  // console.log(\"Syllabic rows: \");\r\n  const df = new DataFrame(rows, columns);\r\n  // console.log(df);\r\n\r\n  // console.log(\"stateName: \" + stateName);\r\n  // console.log(\"districtName: \" + districtName);\r\n  let districts = [],\r\n    dataObjects = [];\r\n  if (districtName === \"All Districts\") {\r\n    districts = Districts(stateName);\r\n  } else {\r\n    districts.push(districtName);\r\n  }\r\n  for (let i = 0; i < districts.length; i++) {\r\n    const dataDict = df\r\n      .filter({ State: stateName, District: districts[i] })\r\n      .toArray();\r\n    const districtObjects = dataDict.map((row, index) => ({\r\n      Year: row[0],\r\n      // State: row[1],\r\n      // People: row[3],\r\n      SyllabicCount: row[4],\r\n    }));\r\n    dataObjects.push({ District: districts[i], Data: districtObjects });\r\n  }\r\n  // console.log(dataObjects);\r\n\r\n  return dataObjects;\r\n}\r\n\r\nfunction SyllabicCount(props) {\r\n  const stateName = props.state;\r\n  const districtName = props.district;\r\n  // console.log(stateName);\r\n  // console.log(districtName);\r\n  const series = GetSyllabicData(props.csvData, stateName, districtName);\r\n  return (\r\n    // <Label content=\"Syllabic Complexity\">\r\n    <LineChart\r\n      width={700}\r\n      height={300}\r\n      margin={{ top: 30, right: 15, bottom: 50, left: 5 }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"4 4\" />\r\n      <XAxis\r\n        dataKey=\"Year\"\r\n        type=\"category\"\r\n        allowDuplicatedCategory={false}\r\n        tick={{ fontSize: 14 }}\r\n      >\r\n        <Label\r\n          value=\"Year\"\r\n          position=\"insideBottomCenter\"\r\n          dy={18}\r\n          fontSize={15}\r\n        />\r\n      </XAxis>\r\n\r\n      <YAxis domain={[1.5, 3.5]} tick={{ fontSize: 14 }}>\r\n        <Label\r\n          value=\"Syllabic Count\"\r\n          angle={-90}\r\n          position=\"insideLeftCenter\"\r\n          dx={-15}\r\n          fontSize={15}\r\n        />\r\n      </YAxis>\r\n      {/* <Tooltip /> */}\r\n      {/* <Legend /> */}\r\n      {series.map((s) => (\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"SyllabicCount\"\r\n          data={s.Data}\r\n          name={s.District}\r\n          key={s.District}\r\n          dot={false}\r\n        />\r\n      ))}\r\n    </LineChart>\r\n    // </Label>\r\n  );\r\n}\r\n\r\nexport default SyllabicCount;\r\n","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport SampleNames from \"./SampleNames\";\r\nimport Axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Label,\r\n} from \"recharts\";\r\nimport Papa from \"papaparse\";\r\nimport DataFrame from \"dataframe-js\";\r\n\r\nfunction GetGDPData(rows, stateName, districtName) {\r\n  const columns = [\"Year\", \"State\", \"District\", \"GDP\"];\r\n  const df = new DataFrame(rows, columns);\r\n  // console.log(rows);\r\n  // console.log(\"districtName: \" + districtName);\r\n  let districts = [],\r\n    dataObjects = [];\r\n  if (districtName === \"All Districts\") {\r\n    districts = Districts(stateName);\r\n  } else {\r\n    districts.push(districtName);\r\n  }\r\n  for (let i = 0; i < districts.length; i++) {\r\n    let dataDict = df\r\n      .filter({ State: stateName, District: districts[i] })\r\n      .toArray();\r\n\r\n    const districtObjects = dataDict.map((row, index) => ({\r\n      Year: row[0],\r\n      GDP: parseInt(row[3]),\r\n    }));\r\n    // console.log(districtObjects);\r\n    dataObjects.push({ District: districts[i], Data: districtObjects });\r\n  }\r\n  return dataObjects;\r\n}\r\n\r\nfunction GDP(props) {\r\n  const stateName = props.state;\r\n  const districtName = props.district;\r\n  const series = GetGDPData(props.csvData, stateName, districtName);\r\n  return (\r\n    // <ResponsiveContainer width=\"100%\" height={400}>\r\n    <LineChart\r\n      width={500}\r\n      height={300}\r\n      margin={{ top: 20, right: 75, bottom: 50, left: 30 }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis\r\n        dataKey=\"Year\"\r\n        type=\"category\"\r\n        interval={0}\r\n        angle={30}\r\n        textAnchor=\"start\"\r\n        allowDuplicatedCategory={false}\r\n        tick={{ fontSize: 14 }}\r\n      >\r\n        <Label\r\n          value=\"Year\"\r\n          position=\"insideBottomCenter\"\r\n          dy={40}\r\n          fontSize={15}\r\n        />\r\n      </XAxis>\r\n      <YAxis type=\"number\" tick={{ fontSize: 14 }}>\r\n        <Label\r\n          value=\"GDP (in Rs. Cr.)\"\r\n          angle={-90}\r\n          position=\"insideLeftCenter\"\r\n          dx={-40}\r\n          fontSize={15}\r\n        />\r\n      </YAxis>\r\n      {/* <YAxis /> */}\r\n      {/* <Tooltip /> */}\r\n      {/* <Legend\r\n          wrapperStyle={{ position: \"relative\" }}\r\n          layout=\"horizontal\"\r\n          verticalAlign=\"right\"\r\n          align=\"center\"\r\n        /> */}\r\n      {series.map((s) => (\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"GDP\"\r\n          data={s.Data}\r\n          name={s.District}\r\n          key={s.District}\r\n          dot={false}\r\n          // activeDot={{ onClick: (event, payload) => console.log(payload) }}\r\n        />\r\n      ))}\r\n    </LineChart>\r\n    // </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default GDP;\r\n","export default __webpack_public_path__ + \"static/media/image.499e2ad4.png\";","export default __webpack_public_path__ + \"static/media/largeImage.8c08b9c9.png\";","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport Select from \"react-select\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Label,\r\n} from \"recharts\";\r\nimport Papa from \"papaparse\";\r\nimport DataFrame from \"dataframe-js\";\r\n\r\nfunction GetStateObjects() {\r\n  let states = [\r\n    \"Andaman And Nicobar Islands\",\r\n    \"Andhra Pradesh\",\r\n    \"Arunachal Pradesh\",\r\n    \"Chandigarh\",\r\n    \"Dadra And Nagar Haveli\",\r\n    \"Daman And Diu\",\r\n    \"Goa\",\r\n    \"Haryana\",\r\n    \"Himachal Pradesh\",\r\n    // \"Jammu And Kashmir\",\r\n    \"Madhya Pradesh\",\r\n    \"Manipur\",\r\n    \"Meghalaya\",\r\n    \"Mizoram\",\r\n    \"Nagaland\",\r\n    \"Puducherry\",\r\n    \"Uttar Pradesh\",\r\n    \"Uttarakhand\",\r\n  ];\r\n  states.unshift(\"All States\");\r\n  const stateObjects = states.map((str, index) => ({\r\n    value: index,\r\n    label: str,\r\n  }));\r\n  return stateObjects;\r\n}\r\n\r\nfunction GetData(rows, stateName, yearInterval) {\r\n  const columns = [\r\n    \"Year\",\r\n    \"State\",\r\n    \"District\",\r\n    \"AvgSyllabicCount\",\r\n    \"In-migrants\",\r\n  ];\r\n  const df = new DataFrame(rows, columns);\r\n  // console.log(\"stateName: \" + stateName);\r\n  let dataObjects = [];\r\n  if (stateName === \"All States\") {\r\n    let dataDict = df.filter({ Year: yearInterval }).toArray();\r\n    dataObjects = dataDict.map((row, index) => ({\r\n      // Year: row[0],\r\n      AvgSyllabicCount: row[3],\r\n      In_migrants: parseInt(row[4]),\r\n    }));\r\n  } else {\r\n    // districts = Districts(stateName);\r\n    let dataDict = df\r\n      .filter({ State: stateName, Year: yearInterval })\r\n      .toArray();\r\n    dataObjects = dataDict.map((row, index) => ({\r\n      District: row[2],\r\n      AvgSyllabicCount: row[3],\r\n      In_migrants: parseInt(row[4]),\r\n    }));\r\n  }\r\n  return dataObjects;\r\n}\r\n\r\nfunction ScatterPlotElement(props) {\r\n  const stateName = props.state;\r\n  const yearInterval = props.yearInterval;\r\n  const data = GetData(props.csvData, stateName, yearInterval);\r\n  // console.log(data);\r\n  return (\r\n    <ScatterChart\r\n      width={300}\r\n      height={200}\r\n      margin={{\r\n        top: 3,\r\n        right: 3,\r\n        bottom: 20,\r\n        left: 3,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis type=\"number\" dataKey=\"In_migrants\" tick={{ fontSize: 14 }}>\r\n        <Label\r\n          value=\"In-migrants\"\r\n          position=\"insideBottomCenter\"\r\n          dy={18}\r\n          fontSize={15}\r\n        />\r\n      </XAxis>\r\n      <YAxis type=\"number\" dataKey=\"AvgSyllabicCount\" tick={{ fontSize: 14 }}>\r\n        <Label\r\n          value=\"Syllabic Count\"\r\n          angle={-90}\r\n          position=\"insideLeftCenter\"\r\n          dx={-15}\r\n          fontSize={15}\r\n        />\r\n      </YAxis>\r\n      {/* <Tooltip cursor={{ strokeDasharray: \"3 3\" }} /> */}\r\n      <Scatter\r\n        name=\"\"\r\n        data={data}\r\n        // stroke=\"rgb(0, 157, 249)\"\r\n        strokeWidth={0.5}\r\n        width={1}\r\n        fillOpacity={0.5}\r\n        fill=\"rgb(0, 157, 249)\"\r\n      />\r\n      {/* fill=\"#8884d8\" */}\r\n    </ScatterChart>\r\n  );\r\n}\r\nfunction MigrationVSSyllabicCount(props) {\r\n  // console.log(props.stateValue);\r\n  const [stateSelected, setStateSelected] = useState({\r\n    value: props.stateValue + 1,\r\n    label: props.stateLabel,\r\n  });\r\n  const changeStateSelectOptionHandler = (event) => {\r\n    setStateSelected(event);\r\n  };\r\n\r\n  const [rows, setRows] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function getData() {\r\n      // const response = await fetch(\"/data/YearwiseSyllabicCount3.csv\");\r\n      const response = await fetch(\"/data/SyllabicCount_vs_Migration.csv\");\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read(); // raw array\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n      const csv = decoder.decode(result.value); // the csv text\r\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\r\n      const rows = results.data; // array of objects\r\n      setRows(rows);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const stateSelectElement = (\r\n    <Select\r\n      className=\"select-search mt-2 col-md-3 col-offset-2\"\r\n      classNamePrefix=\"select\"\r\n      placeholder=\"Andhra Pradesh\"\r\n      onChange={changeStateSelectOptionHandler}\r\n      selectedValue={stateSelected}\r\n      isClearable=\"true\"\r\n      isSearchable=\"true\"\r\n      name=\"state\"\r\n      options={GetStateObjects()}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <p className=\"textStyles\">\r\n        How syllabic complexity changes over immigration rate for\r\n        {stateSelectElement} ?\r\n      </p>\r\n      <hr />\r\n      <Row>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1972 - 1976</div>\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1972 - 1976\"\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1977 - 1981</div>\r\n\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1977 - 1981\"\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1982 - 1986</div>\r\n\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1982 - 1986\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1987 - 1991</div>\r\n\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1987 - 1991\"\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1992 - 1996</div>\r\n\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1992 - 1996\"\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <div className=\"cardText\"> YEAR: 1997 - 2000</div>\r\n\r\n          <ScatterPlotElement\r\n            csvData={rows}\r\n            state={stateSelected.label}\r\n            yearInterval=\"1997 - 2000\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default MigrationVSSyllabicCount;\r\n","import React, { useState } from \"react\";\r\nimport \"./components.css\";\r\nimport Districts from \"./Districts\";\r\nimport SampleNames from \"./SampleNames\";\r\nimport Migration from \"./Migration\";\r\nimport SyllabicCount from \"./SyllabicCount\";\r\nimport GDP from \"./GDP\";\r\nimport Axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport Papa from \"papaparse\";\r\nimport DataFrame from \"dataframe-js\";\r\n\r\nimport { GlassMagnifier, SideBySideMagnifier } from \"react-image-magnifiers\";\r\nimport image from \"./image.png\";\r\nimport largeImage from \"./largeImage.png\";\r\nimport MigrationVSSyllabicCount from \"./MigrationVSSyllabicCount\";\r\n\r\n// const csvFilePath = \"http://localhost:3000/data/AllYearsSyllabicCount.csv\";\r\n\r\n// const csvFilePath = \"/data/YearwiseSyllabicCount3.csv\";\r\n// const csvFilePath =\r\n// \"https://github.com/nancy707/files/blob/main/YearwiseSyllabicCount3.csv\";\r\n// DataFrame.fromCSV(csvFilePath).then((df) => df.show());\r\n// let myDF;\r\n// DataFrame.fromCSV(csvFilePath1).then((df) => (myDF = df));\r\n// Papa.parse(csvFilePath, {\r\n//   header: true,\r\n//   delimiter: \",\",\r\n//   linebreak: \"\\n\",\r\n//   complete: function (results) {\r\n//     // callBack(results.data);\r\n//     console.log(\"Data: \" + results.data.length, results);\r\n//   },\r\n// });\r\n\r\nfunction GetYearObjects() {\r\n  let years = [];\r\n  const start = 1972;\r\n  for (let i = 0; i < 29; i++) {\r\n    years.push(start + i);\r\n  }\r\n  const yearObjects = years.map((str, index) => ({\r\n    value: index + 1,\r\n    label: str,\r\n  }));\r\n  return yearObjects;\r\n}\r\n\r\nfunction GetStateObjects() {\r\n  const states = [\r\n    \"Andaman And Nicobar Islands\",\r\n    \"Andhra Pradesh\",\r\n    \"Arunachal Pradesh\",\r\n    \"Chandigarh\",\r\n    \"Dadra And Nagar Haveli\",\r\n    \"Daman And Diu\",\r\n    \"Goa\",\r\n    \"Haryana\",\r\n    \"Himachal Pradesh\",\r\n    // \"Jammu And Kashmir\",\r\n    \"Madhya Pradesh\",\r\n    \"Manipur\",\r\n    \"Meghalaya\",\r\n    \"Mizoram\",\r\n    \"Nagaland\",\r\n    \"Puducherry\",\r\n    \"Uttar Pradesh\",\r\n    \"Uttarakhand\",\r\n  ];\r\n  const stateObjects = states.map((str, index) => ({\r\n    value: index + 1,\r\n    label: str,\r\n  }));\r\n  return stateObjects;\r\n}\r\n\r\nfunction GetDistrictObjects(stateName) {\r\n  let districts = Districts(stateName);\r\n  districts.unshift(\"All Districts\");\r\n  const districtObjects = districts.map((str, index) => ({\r\n    value: index,\r\n    label: str,\r\n  }));\r\n  return districtObjects;\r\n}\r\n\r\nfunction MainPage() {\r\n  const [show, setShowVariable] = useState(false);\r\n  const [stateSelected, setStateSelected] = useState({\r\n    value: 2,\r\n    label: \"Andhra Pradesh\",\r\n  });\r\n  const changeStateSelectOptionHandler = (event) => {\r\n    setStateSelected(event);\r\n    setDistrictSelected({ value: 0, label: \"All Districts\" });\r\n  };\r\n\r\n  const [districtSelected, setDistrictSelected] = useState({\r\n    value: 0,\r\n    label: \"All Districts\",\r\n  });\r\n  const changeDistrictSelectOptionHandler = (event) => {\r\n    setDistrictSelected(event);\r\n    setShowVariable(true);\r\n  };\r\n\r\n  const [yearSelected, setYearSelected] = useState({\r\n    value: 29,\r\n    label: 2000,\r\n  });\r\n  const changeYearSelectOptionHandler = (event) => {\r\n    setYearSelected(event);\r\n  };\r\n\r\n  const [syllabicRows, setSyllabicRows] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function getData() {\r\n      // const response = await fetch(\"/data/YearwiseSyllabicCount3.csv\");\r\n      const response = await fetch(\r\n        \"https://nancy707.github.io/namesApp/data/AllYearsSyllabicCount.csv\"\r\n      );\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read(); // raw array\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n      const csv = decoder.decode(result.value); // the csv text\r\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\r\n      const rows = results.data; // array of objects\r\n      setSyllabicRows(rows);\r\n      // console.log(\"Syllabic rows: \");\r\n      // console.log(syllabicRows);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const [migrationRows, setMigrationRows] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function getData() {\r\n      const response = await fetch(\r\n        \"https://nancy707.github.io/namesApp/data/MigrationTableFinal.csv\"\r\n      );\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read(); // raw array\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n      const csv = decoder.decode(result.value); // the csv text\r\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\r\n      const rows = results.data; // array of objects\r\n      setMigrationRows(rows);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const [gdpRows, setGDPRows] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function getData() {\r\n      const response = await fetch(\r\n        \"https://nancy707.github.io/namesApp/data/YearwiseGDP.csv\"\r\n      );\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read(); // raw array\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n      const csv = decoder.decode(result.value); // the csv text\r\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\r\n      const rows = results.data; // array of objects\r\n      setGDPRows(rows);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const [sampleNameRows1, setSampleNameRows1] = React.useState([]);\r\n  React.useEffect(() => {\r\n    // setSampleNameRows1(DataFrame.fromCSV(csvFilePath1))\r\n    async function getData() {\r\n      const csvFilePath1 =\r\n        \"https://nancy707.github.io/namesApp/data/SampleNames1.csv\";\r\n      let temp = await DataFrame.fromCSV(csvFilePath1);\r\n      setSampleNameRows1(temp.toCollection());\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const [sampleNameRows2, setSampleNameRows2] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function getData() {\r\n      const csvFilePath2 =\r\n        \"https://nancy707.github.io/namesApp/data/SampleNames2.csv\";\r\n      let temp = await DataFrame.fromCSV(csvFilePath2);\r\n      setSampleNameRows2(temp.toCollection());\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const stateSelectElement = (\r\n    <Select\r\n      className=\"select-search mt-2 col-md-3 col-offset-2\"\r\n      classNamePrefix=\"select\"\r\n      placeholder=\"Andhra Pradesh\"\r\n      onChange={changeStateSelectOptionHandler}\r\n      selectedValue={stateSelected}\r\n      isClearable=\"true\"\r\n      isSearchable=\"true\"\r\n      name=\"state\"\r\n      options={GetStateObjects()}\r\n    />\r\n  );\r\n\r\n  const districtSelectElement = (\r\n    <Select\r\n      className=\"select-search mt-2 col-md-3 col-offset-2\"\r\n      classNamePrefix=\"select\"\r\n      placeholder=\"All Districts\"\r\n      onChange={changeDistrictSelectOptionHandler}\r\n      selectedValue={districtSelected}\r\n      isClearable=\"true\"\r\n      isSearchable=\"true\"\r\n      name=\"district\"\r\n      options={GetDistrictObjects(stateSelected.label)}\r\n    />\r\n  );\r\n\r\n  const yearSelectElement = (\r\n    <Select\r\n      className=\"select-search mt-1 col-md-2 col-offset-1\"\r\n      classNamePrefix=\"select\"\r\n      placeholder=\"2000\"\r\n      onChange={changeYearSelectOptionHandler}\r\n      selectedValue={yearSelected}\r\n      // isClearable=\"true\"\r\n      isSearchable=\"true\"\r\n      name=\"year\"\r\n      options={GetYearObjects()}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"w3-cell-row heading\">\r\n        <h2>Evolution of naming conventions in India</h2>\r\n        <p className=\"textStyles\">\r\n          How data changes over time for state {stateSelectElement} and for\r\n          district {districtSelectElement} ?\r\n        </p>\r\n      </div>\r\n      <hr />\r\n      <div className=\"w3-cell-row\">\r\n        <div class=\"w3-container w3-cell\" style={{ width: \"30%\" }}>\r\n          <h5 style={{ marginTop: \"8px\" }}>\r\n            {stateSelected.label.toUpperCase()}\r\n          </h5>\r\n          <SideBySideMagnifier\r\n            imageSrc={image}\r\n            imageAlt=\"Example\"\r\n            largeImageSrc={largeImage}\r\n            className=\"stateCard\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"w3-container w3-cell\" style={{ width: \"70%\" }}>\r\n          <div className=\"graphCard\">\r\n            <br />\r\n            <div className=\"cardText\">Syllabic Complexity over years</div>\r\n            <SyllabicCount\r\n              csvData={syllabicRows}\r\n              state={stateSelected.label}\r\n              district={districtSelected.label}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"w3-cell-row\">\r\n        {/* <div class=\"w3-responsive\"> */}\r\n        <table\r\n          className=\"w3-table-all w3-centered\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <tr>\r\n            <th colspan=\"4\">Sample names in {yearSelectElement}</th>\r\n          </tr>\r\n          <SampleNames\r\n            csvData1={sampleNameRows1}\r\n            csvData2={sampleNameRows2}\r\n            state={stateSelected.label}\r\n            district={districtSelected.label}\r\n            year={yearSelected.label}\r\n          />\r\n        </table>\r\n        {/* </div> */}\r\n      </div>\r\n\r\n      <div class=\"w3-cell-row\" style={{ marginTop: \"25px\" }}>\r\n        <div class=\"w3-container w3-cell\" style={{ width: \"50%\" }}>\r\n          <div className=\"graphCard\">\r\n            <br />\r\n            <div className=\"cardText\">Immigration over year-intervals</div>\r\n            <Migration\r\n              csvData={migrationRows}\r\n              state={stateSelected.label}\r\n              district={districtSelected.label}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"w3-container w3-cell\" style={{ width: \"50%\" }}>\r\n          <div className=\"graphCard\">\r\n            <br />\r\n            <div className=\"cardText\">Gross domestic product over time</div>\r\n            <GDP\r\n              csvData={gdpRows}\r\n              state={stateSelected.label}\r\n              district={districtSelected.label}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w3-cell-row\" style={{ marginTop: \"30px\" }}>\r\n        <MigrationVSSyllabicCount\r\n          stateValue={stateSelected.value}\r\n          stateLabel={stateSelected.label}\r\n        />\r\n      </div>\r\n    </Container>\r\n\r\n    // <Container className=\"upperContainer\">\r\n    //   <p>\r\n    //     How data changes over time for state {stateSelectElement} and for\r\n    //     district {districtSelectElement} ?\r\n    //   </p>\r\n\r\n    //   <Row>\r\n    //     <Col>\r\n    //       <div className=\"graphCard\">\r\n    //         <SyllabicCount\r\n    //           csvData={syllabicRows}\r\n    //           state={stateSelected.label}\r\n    //           district={districtSelected.label}\r\n    //         />\r\n    //       </div>\r\n    //       {/* {show ? (\r\n    //         <LineChartElementForSyllabicCount\r\n    //           csvData={syllabicRows}\r\n    //           state={stateSelected.label}\r\n    //           district={districtSelected.label}\r\n    //         />\r\n    //       ) : (\r\n    //         <div></div>\r\n    //       )} */}\r\n    //     </Col>\r\n    //     <Col>\r\n    //       <div className=\"graphCard\">\r\n    //         <Migration\r\n    //           csvData={migrationRows}\r\n    //           state={stateSelected.label}\r\n    //           district={districtSelected.label}\r\n    //         />\r\n    //       </div>\r\n    //       {/* {show ? (\r\n    //         <LineChartElementForMigration\r\n    //           csvData={migrationRows}\r\n    //           state={stateSelected.label}\r\n    //           district={districtSelected.label}\r\n    //         />\r\n    //       ) : (\r\n    //         <div></div>\r\n    //       )} */}\r\n    //     </Col>\r\n    //   </Row>\r\n    //   <Row>\r\n    //     <Col>\r\n    //       <div className=\"graphCard\">\r\n    //         <h5>\r\n    //           Sample names in <br /> {yearSelectElement}\r\n    //         </h5>\r\n    //         {/* <ul class=\"w3-ul w3-card-2\" style={{ width: \"30%\" }}> */}\r\n    //         <ul class=\"w3-ul w3-center\" style={{ width: \"30%\" }}>\r\n    //           <SampleNames\r\n    //             csvData1={sampleNameRows1}\r\n    //             csvData2={sampleNameRows2}\r\n    //             state={stateSelected.label}\r\n    //             district={districtSelected.label}\r\n    //             year={yearSelected.label}\r\n    //           />\r\n    //         </ul>\r\n    //       </div>\r\n    //     </Col>\r\n    //     <Col></Col>\r\n    //   </Row>\r\n    // </Container>\r\n  );\r\n}\r\nexport default MainPage;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport {\n  Container,\n  Navbar,\n  Nav,\n  Button,\n  Form,\n  FormControl,\n} from \"react-bootstrap\";\nimport MainPage from \"./Components/MainPage\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [roll, setRoll] = useState(\"\");\n  const [studentList, setStudentList] = useState([]);\n\n  // to retrieve the data from database through backend\n  // useEffect(() => {\n  //   Axios.get(\"http://localhost:3001/read\").then((response) => {\n  //     console.log(response.data);\n  //     setStudentList(response.data);\n  //   });\n  // }, []);\n\n  // to retrieve the data from database through backend\n  // useEffect((stateName) => {\n  //   Axios.get(\"http://localhost:3001/readSyllabicCount\", {\n  //     params: { state: stateName },\n  //   }).then((response) => {\n  //     console.log(response.data);\n  //     setStudentList(response.data);\n  //   });\n  // }, []);\n\n  const submitFunc = () => {\n    Axios.post(\"http://localhost:3001/insert\", {\n      studentName: name,\n      rollNo: roll,\n    }).then(() => {\n      console.log(\"Successfully inserted.\");\n    });\n  };\n\n  const studentListMap = studentList.map((val) => {\n    return <h1>Student Name: {val.Tables_in_namesdb}</h1>;\n  });\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <MainPage />\n        {/* <Navbar bg=\"light\" variant=\"light\">\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/project_details\">\n              <Nav.Link>Project</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/syllabic_count\">\n              <Nav.Link>Syllabic Complexity</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/migration\">\n              <Nav.Link>Migration</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/gdp\">\n              <Nav.Link>GDP</Nav.Link>\n            </LinkContainer>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-primary\">Search</Button>\n          </Form>\n        </Navbar> */}\n      </Container>\n\n      {/* <h1>CRUD APPLICATION</h1>\n      <div className=\"form\">\n        <label>Student name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n        <label>Roll number</label>\n        <input\n          type=\"text\"\n          name=\"roll\"\n          onChange={(e) => {\n            setRoll(e.target.value);\n          }}\n        />\n\n        <button onClick={submitFunc}> Submit </button>\n\n        {studentListMap}\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Project from \"./Components/ProjectDetails\";\nimport MigrationVSSyllabicCount from \"./Components/MigrationVSSyllabicCount\";\nimport GDP from \"./Components/GDP\";\nimport SyllabicCount from \"./Components/SyllabicCount\";\nimport MainPage from \"./Components/MainPage\";\n\nReactDOM.render(\n  <Router>\n    <App />\n    {/* <Switch>\n      <Route path=\"/project_details\" component={Project} />\n      <Route path=\"/syllabic_count\" component={MainPage} />\n      <Route path=\"/migration\" component={MigrationVSSyllabicCount} />\n      <Route path=\"/gdp\" component={GDP} />\n    </Switch> */}\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}